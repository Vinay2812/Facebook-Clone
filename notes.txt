/*
Tech Stack ->
1.React
2.mongodb
3.RestApi
4.Express.js
5.mongoose
6.Postman
7.BCrypt -> encryption
*/
1-> npm init
2-> npm install express mongoose dotenv helmet morgan nodemon

//express -> js framework on which our server runs
//mongoose -> helps to create db models
//dotenv -> hide data of user
//helmet -> make secure request to server (some of them not all)
//morgan -> request logger, which means whenever a request is made, 
            it returns us a result, how much time did it take etc
//nodemon -> normally if we make changes in our file we need to restart server,
             but using nodemon, we can start server only once and changes are applied automatically

3-> package.json -> "scripts" -> add "start":"nodemon index.js"

4-> Starting in index.js, include all the required modules

5-> create .env file and add mongodb connection url in .env
    dotenv.config(); // to use .env

6-> using mongoose.connect(), connect to database
    mongoose.connect(process.env.MONGO_URL, ()=>{
        console.log("Database connected");
    });

7-> app.use(express.json()); //middleware function -> started from version 4.16.0
// body parser that parses the incoming JSON request and put parsed data req. body

/********** Creating RestApi *********/

1-> Create routes folder

2-> Create users.js and create a router and export it so that you can use in index.js
        const router = require("express").Router(); //create the router
        module.exports = router; //export

3-> import router in index.js

4-> make call to users.js using api
    app.use("/api/user", userRouter);
    // whenever we go to address "/api/user" -> userRouter(imported from routes) will be used
/*
   "async and await make promises easier to write"
    async makes a function return a Promise
    await makes a function wait for a Promise
*/

5-> create auth.js in routes for authentication and include it in index.js and use it

/********* Create Models *********/

1-> Create models folder

2 -> Create User.js

3-> create schema using -> const UserSchema = new mongoose.Schema({...});

4-> export schema using -> module.exports = mongoose.model("User", UserSchema);
    //User is the model name that points to schema 

5-> /***** auth.js -> Register *******/

use postman to post request for testing purpose
/*
router.post("/register", async (req, res)=>{
    //Testing
    try{
        //encrypt password
        const salt = await bcrypt.genSalt(10); //number of rounds
        const hashedPassword = await bcrypt.hash(req.body.password, salt)
        
        //create new user by taking the data from req in form of json
        const newUser = new User({
            username: req.body.username,
            email: req.body.email,
            password: req.body.password
        });

        //save user and respond
        const user = await newUser.save();
        res.status(200).json(user); // 200 -> everything is ok

    } catch(err){
        console.log("auth.js -> register -> " + err);
    }
});
*/
6-> similarly create login
/*
router.post("/login", async (req, res)=>{
    try{
        const user = await User.findOne({
            email: req.body.email
        });

        !user && res.status(404).json("user not found");

        const validPassword = await bcrypt.compare(req.body.password, user.password);
        // });

        !validPassword && res.status(400).json("Invalid Password");
        res.status(200).json(user); // login successful

    }catch(err){
        console.log("auth.js -> login -> "+ err);
    }
});
*/

7. users.js -> update user -> 
/******update user ******/ 
//params => is object of req that contains route parameters
router.put("/:id", async(req, res)=>{// allows us to put any user id
    
    
    if(req.body.userId === req.params.id || req.params.isAdmin){ // check if id is correct or admin wants to update
        // written separately for password, since we need to hash it
        if(req.body.password){ // if trying to update password
            try{
                const salt = await bcrypt.genSalt(10);
                //update password
                req.body.password = await bcrypt.hash(req.body.password, salt);
            }
            catch(err){
                console.log("users.js -> updating user -> "+ err);
                return res.status(500).json(err);
            } 
        }
        // update information of user
        try{
            const user = await User.findByIdAndUpdate(req.params.id, {//find the user by id and update whole body
                $set: req.body,
            });
            res.status(200).json("Account has been updated");
        }
        catch(err){
            console.log("users.js -> updated user -> "+ err);
            return res.status(500).json(err);
        }
    }
    else{
        return res.status(403).json("You can update only your account");
    }
});

8. users.js -> delete user -> similar to update user

9. users.js -> get user -> 
/******* get an user *******/
-> user._doc -> contains all object
-> to store objects separately -> const {password, updatedAt, ...other} = user._doc;
router.get("/:id", async(req, res)=>{
    try{
        const user = await User.findById(req.params.id);

        // storing password, updated object info separately and all other documents in other object
        const {password, updatedAt, ...other} = user._doc;// contains all object

        res.status(200).json(other);//sending only necessary info
    }
    catch(err){
        console.log("users.js -> get user -> " + err);
        res.status(500).json(err);
    }
});

9. users.js -> follow user -> 
/******* follow an user *********/
//url of whom we want to follow
router.put("/:id/follow", async(req, res)=>{
    if(req.body.userId !== req.params.id){//Not same user
        try{
            const user = await User.findById(req.params.id);//other to whom i want to follow
            const currentUser = await User.findById(req.body.userId);//me

            if(!user.followers.includes(req.body.userId)){//if i am not in user followers list

                // push my id in his followers array
                await user.updateOne({ $push: {followers: req.body.userId } });

                //add his id in my followings
                await currentUser.updateOne({ $push: {followings: req.params.id } });
                res.status(200).json("User has been followed");
            }
            else{
                return res.status(403).json("You already follow this user")
            }
        }
        catch(err){
            console.log("users.js -> follow user -> " + err);
            res.status(500).json(err);
        }
    }
    else{
        res.status(403).json("You can't follow yourself");
    }
});

9. users.js -> unfollow user -> 
    same as follow user just instead of checking user not followed, 
    check if user is followed and use push use pull to remove.


10. In models -> Post.js -> create schema for posts
/********* Post.js ************/
const PostSchema = new mongoose.Schema(
    {
        userId:{
            type: String,
            required: true
        },
        desc:{
            type:String,
            max: 500
        },
        img:{
            type: String
        },
        likes:{
            type: Array,
            default: []
        }
    },
    {
        timestamps: true,
    }
);
module.exports = mongoose.model("Post", PostSchema);

11. Create route for posts i.e routes -> posts.js

12. Include the route in index.js and create a route for posts
    app.use("/api/posts", postRoute);

13. In posts.js -> 

/****** Create a post ******/
router.post("/", async (req, res)=>{
    const newPost = new Post(req.body);
    try{
        const savedPost = await newPost.save();
        res.status(200).json(savedPost);
    }catch(err){
        console.log("posts.js -> create -> " + err);
        res.status(500).json(err);
    }
});

/****** Update a post ******/
router.put("/:id", async (req, res) => {//:id->post id
    try{
        const post = await Post.findById(req.params.id);
        if(post.userId === req.body.userId){// check if req user is same as post user for update
            await post.updateOne({
                $set: req.body
            });
            res.status(200).json("The post has been updated");
        }
        else{
            res.status(403).json("You can update only your post");
        }
    }
    catch(err){
        console.log("posts.js -> update post -> " + err);
        res.status(500).json(err);
    }
    
});
/****** Delete a post ******/
router.delete("/:id", async (req, res) => {//:id->post id
    try{
        const post = await Post.findById(req.params.id);
        if(post.userId === req.body.userId){// check if req user is same as post user for update
            await post.deleteOne();
            res.status(200).json("The post has been deleted");
        }
        else{
            res.status(403).json("You can delete only your post");
        }
    }
    catch(err){
        console.log("posts.js -> delete post -> " + err);
        res.status(500).json(err);
    }
    
});

/****** Like and Dislike a post ******/
router.put("/:id/like", async (req, res)=>{ 
    try{ 
        const post = await Post.findById(req.params.id);
        if(!post.likes.includes(req.body.userId)){ // check if like array includes like
            await post.updateOne({
                $push: {likes: req.body.userId} // push in like array
            });
            res.status(200).json("You have liked the post");
        }
        else{
            await post.updateOne({
                $pull: {likes: req.body.userId}
            });
            res.status(200).json("You have disliked the post");
        }
        
    }
    catch(err){
        console.log("posts.js -> like -> " + err);
        res.status(500).json(err);
    }
});

/****** Get a post ******/
router.get("/:id", async (req, res)=>{
    try{
        const post = await Post.findById(req.params.id);
        // const {_id, createdAt, ...others} = post._doc;
        res.status(200).json(post);
    }
    catch(err){
        console.log("post.js -> get a post -> " + err);
        res.status(500).json(err);
    }
});

/****** Get timeline posts ******/ // => all post of user and there followings
// router.get("/timeline", async (req, res)=>{ => "/timeline" conflicts with /:id hence we need to change it
router.get("/timeline/all", async (req, res)=>{
    try{
        
        const currentUser = await User.findById(req.body.userId);
        const userPosts = await Post.find({
            userId: currentUser._id
        });
        // since we will have multiple promises instead of using await, we will use "Promise"
        // if we use only await, then it is not going to give us all users, since await works with one promise
        const friendPosts = await Promise.all(
            // for current users followings, we will get all the ids of followings 
            // and using map, for each friend we are finding there posts by id and adding it in friend post
            currentUser.followings.map((friendId) => {
                return Post.find({userId: friendId});
            })
        );
        // ...friendPosts -> all posts in friendPosts
        //hence take all the post of friends and concat with user post to give one list of post
        res.status(200).json(userPosts.concat(...friendPosts));
        
    }
    catch(err){
        console.log("post.js -> get timeline post -> " + err);
        res.status(500).json(err);
    }
});